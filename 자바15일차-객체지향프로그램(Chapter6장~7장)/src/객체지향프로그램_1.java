/*
 *    1. 객체제향의 3대요소 (230~231page) => 권장 
 *       = 캡슐화 / 은닉화  => 데이터 보호 => 변수 
 *       = 상속 / 포함     => 재사용 (변경없이 사용 , 변경해서 사용)
 *                                 포함          상속 
 *         => 클래스자체 
 *       = 다형성 ==> 메소드 
 *          = 오버로딩 : new (새로운 기능 추가)
 *          = 오버라이딩 : modify (기존의 기능 변경) 
 *       => 유지보수 (재사용 , 기능 첨부 , 기능 변경)
 *                 =====
 *                  신뢰성이 좋다 (기존 사용하고 있기에 검증이 완료)
 *                  => 개발 시간을 줄일 수 있다 (1년이상) 
 *       ----------------------- 기술 면접 ---------------
 *    2. 객체지향 (클래스)
 *       클래스의 구성요소 
 *       class 
 *       ========================
 *         변수 (232page)
 *          => 공유 변수
 *          => 인스턴스 변수 
 *             => 233page => 클래스를 메모리할때 저장공간명 
 *                           객체 
 *          => 지역 변수 
 *       ========================
 *         메소드 
 *          => 공유 메소드
 *          => 인스턴스 메소드 
 *       ========================
 *         초기화(변수) 
 *          = 생성자 
 *          = 초기화블록 
 *             = 인스턴스 블록 
 *             = 정적 블록 
 *       ========================
 *       
 *       
 *    3. 확장 / 재사용 
 *       extends => 상속 (단일 상속)
 *       포함 => 있는 그대로 (스프링) ==> 독립적으로 사용 (POJO***)
 *    4. 수정 , 추가 ==> 다형성 (오버로딩/오버라이딩)
 *    5. 접근지정어 => 접근을 할 수 있는 범위 scope
 *       private , protected , default , public 
 *       => 옵션 : static , abstract , final 
 *    6. 클래스의 종류 
 *       = 일반 클래스 => public class A
 *       = 추상 클래스 => public abstract class A => 구현 메소드를 포함 
 *                     => 공통기반의 프로그램 (설계) 
 *       **= 인터페이스  => 추상클래스를 보완 (추상 클래스 일종) 
 *                     => 데이터베이스 , 스프링 => 인터페이스 기반 
 *                     => 다중 상속이 가능 
 *       = 내부 클래스 : 클래스와 클래스가 공유하는 데이터 
 *                    = 윈도우 
 *                    = 쓰레드
 *                    = 빅데이터 
 *          = 멤버 클래스
 *            class A
 *            {
 *               class B
 *               {
 *               }
 *            }
 *          = 익명의 클래스 : 상속없이 오버라이딩이 가능 
 *            class A
 *            {
 *                B b=new B()
 *                {
 *                   void display(){}
 *                }
 *            }
 *            class B
 *            {
 *                void display(){}
 *            }
 *            ==========> class A extends B
 *            
 *          = 지역 클래스 
 *            class A
 *            {
 *               void display()
 *               {
 *                  class B
 *                  {
 *                  }
 *               }
 *            }
 *            
 *            ==> 람다식 (함수 포인터)
 *            function a(){}
 *            let a=()=>{}
 *            
 */
public class 객체지향프로그램_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        객체지향프로그램_1 a=new 객체지향프로그램_1();
        System.out.println("a="+a);
	}

}
