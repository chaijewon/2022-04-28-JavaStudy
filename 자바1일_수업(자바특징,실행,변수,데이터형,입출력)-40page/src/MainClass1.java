/*
 *   1. 자바 특징 
 *      1) 운영체제의 독립적이다 (모든 운영체제에서 사용이 가능)
 *         => Mac , Window,Linux ,안드로이드(모바일) => 달빅 
 *         => .class => 모든 운영체제에서 사용이 가능 
 *      2) 객체지향 프로그램 (재사용=> 자바(유지보수)=> 대규모 프로그램)
 *         => 캡슐화 , 은닉화 , 상속(is-a) , 포함(has-a) , 다형성
 *            => 오버로딩(new) , 오버라이딩(modify)
 *         단위 클래스
 *         => 자바 구조 
 *         1. package (1번사용) 
 *         2. import  (여러번 사용이 가능) => 다른 라이브러리를 가지고 올때 
 *         public class className
 *         {
 *            ====================
 *               변수 선언 (데이터를 1개를 저장할 수 있는 공간)
 *               => 객체마다 사용하는 변수 (인스턴스변수)
 *               => 모든 객체가 동일하게 사용 (공유변수)
 *            ====================
 *               변수를 이용해서 처리 
 *               메소드 
 *            ====================
 *               변수에 초기화 
 *               생성자 
 *            ====================
 *            
 *           프로그램 실행의 시작점 
 *           public static void main(String[] arg)
 *           {
 *           }
 *         }
 *         
 *         자바 => 문법 => 구조화(메소드 => 단락) => 객체지향 
 *             => 프로그램이 종료없이 정상수행 (예외처리)
 *             ================================== 기본 자바 (1권) 
 *             => 라이브러리 (2권)
 *         => 프로그램은 오류처리 (코팅테스트) 
 *            예) 문자열을 입력해서 좌우대칭인지 확인 
 *                ABBA => 입력시에 문자열의 갯수가 짝수 
 *                
 *         문법 : 변수,데이터형 => 저장 (데이터)
 *               처리 (저장된 데이터 처리) => 연산자 / 제어문 
 *               데이터를 모아서 관리 (배열) 
 *               ----------------------------------
 *               자바 : 조립식 (사용자 정의 , 라이브러리)
 *               ---
 *                => 메인보드 (CBD) 
 *       3) 비교적 배우기 쉽다 
 *          (C/C++파생된 언어) => 포인터(메모리 주소), 구조체 , 직접 제작
 *                             ==============================(X)
 *                             => 기능을 가지고 있는 클래스 제공 (조립식)
 *                             => 검색 (클래스) => 크롤링 (Jsoup)
 *                             => 오버라이딩 
 *       4) 자동 메모리 관리 (GC) 
 *       -------------------------------------------------------
 *       5) 네트워크 / 분산 / 멀티쓰레드 / 동적 로딩 (Web에서 이미 만들어져있다)
 *          웹서버 (tomcat)
 *          Web에서 사용 C/S (Client/Server)
 *                         --------------
 *                         Front   Back(O) : 변경이 거의 없다
 *                         -------------------Full Stack
 *                         ----- React (1주일 단위 버전이 변경)
 *                                 => 자주사용하는 함수(변경)
 *          질 보다는 양 
 *          ====================================================
 *     2. 주석 : 메뉴얼 작성 (주석은 번역이 안되는 부분) 
 *              한줄 주석 // 
 *              여러 줄 주석 => 9page
 *     3. 자바는 명령문을 작성 => 컴퓨터 구동 
 *             ----- ;까지이 한개의 명령을 내린다 => ;(문장끝)
 *    ======================================================
 *    2장 : 프로그램의 기본 (변수,데이터형, 입출력) 
 *         변수 : 한개의 데이터를 메모리에 저장하는 공간 (변경해서 사용이 가능)
 *               데이터형(정수,실수,문자,문자열) 변수명;
 *         상수 : 한개의 데이터를 메모리에 저장하는 공간 (변경할 수 없다)
 *               final 데이터형 상수명
 *         => final (데이터베이스의 URL주소 , Username,Password)
 *         
 *         ==> 변수명/상수명을 부여할때 (식별자) 
 *             1. 알파벳이나 한글로 시작 
 *                ==== 대소문자 구분을 한다 
 *             2. 숫자를 사용할 수 있다 (앞에 사용 할 수 없다)
 *             3. 특수문자를 사용 할 수 있다 ( _ , $ )
 *             4. 키워드(자바에서 사용되는 단어) 사용할 수 없다 
 *                => 빨간색으로 만들어진것은 키워드 
 *            ---------------------- 길이는 제한이 없다 (3~7자 사이)
 *             약속 (가독성) => 리팩토링
 *               클래스명 : 대문자로 시작  MainClass 
 *                                  ---  --
 *                                   Main_Class 
 *               메소드명 : 소문자 시작 => boardList()
 *               변수명 : 소문자 시작 
 *               상수명 : 모든 단어가 대문자 
 *                      ID , USERNAME , URL
 *             -----------------------------
 *         데이터형 (기본형 , 참조형)
 *                        ----- 배열 / 클래스 (데이터를 모아서 관리)
 *                              주소 (Stack)| 실제 데이터 저장 (Heap)
 *                              -----------  -------------------
 *                               메모리 자체 관리   프로그래머가 관리(GC)
 *         자바에서 지원하는 기본형
 *         1) 정수 저장 공간 
 *            = byte (1byte저장 => -128~127) => 범위를 벗어나면 오버플로우발생
 *              오버플로우 -5~5
 *              -------------
 *                 -5
 *              -------------
 *                 -4
 *              -------------
 *                 -3
 *              -------------
 *                 -1
 *              -------------
 *                  0
 *              -------------
 *                  1
 *              -------------
 *                  2
 *              -------------
 *                  3
 *              -------------
 *                  4
 *              -------------
 *                  5 + 1 ==> 6 (-5)
 *              -------------
 *              
 *            = short (2byte => -32768~32767) => C언어 호환성
 *            = int  (4byte => 32bit) => -21억 4천 ~ 21억 4천
 *              ===================== 프로그램에서 가장 많이 사용 
 *            = long (8byte => 64bit) => -2^63 ~ 2^63-1
 *              금융권 , 증권 ...(빅데이터 , AI)
 *              ========================================
 *              구분 : int / long  ==> L(l)
 *                    10 => int
 *                    10L => long
 *                    ** default => int(컴퓨터에서 인식하는 정수는 int)
 *         2) 실수 저장 공간 
 *            = float(4byte) ==> 소수점 5자리
 *            = double(8byte) ==> 소수점 15자리
 *              컴퓨터에서 인식하는 실수는 double(default)
 *              => 구분 
 *                 float => 10.5f(F)
 *                 double => 10.5d(D) ==>d,D는 생략이 가능 
 *         3) 문자 저장 공간 
 *            = char (2byte=멀티 바이트(Unicode) => 0~65535)
 *              각국의 언어사용이 가능 (호환성)
 *              C/C++(싱글바이트 => 아스키 (0~256) 1byte)
 *              ====================================
 *               Encoding / Decoding(원상복귀) 
 *               자바 ====== %EC%9E%90%EB%B0%94 ===== 자바 
 *                  Encoding                 Decoding
 *                  
 *               -------- (byte) 
 *               => 값을 부여 : '문자한개저장'
 *         4) 논리 저장 공간  
 *            = true/false를 저장하는 공간 
 *              boolean => 1byte => 다른 정수/실수는 비교가 불가능 
 *         5) 각 테이터형의 크기 
 *         byte < short < int < long < float < double
 *                char (정수로 분리가 된다) => 정수형으로 변경이 가능 
 *                'A' => 65 => 'B' 66 'C' 67~~
 *                'a' => 97
 *                '0' => 48 => '1' 49 '2' 50....
 *                
 *         데이터 한개를 저장 (변수)
 *         --------------------
 *         데이터형 변수명
 *         정수 
 *          int kor;
 *          -------- 선언만 하면 사용 할 수 없다 , 초기값을 부여한다
 *          변수 선언 , 초기화값 20~23page 
 *          byte b;
 *          boolean b;
 *          int a;
 *          long a; // 8byte 정수 공간을 만들어 달라 , 이름 a (찾기 위한 index)
 *          double d; // 8byte메모리 공간을 만든다 , 공간의 이름을 d라고 한다
 *          char c; // 문자를 저장하는 공간을 만들어라 , 찾을 경우 c라는 이름을 찾는다
 *          ==================
 *          실제 값을 저장 
 *          ----- 리터럴 
 *          변수 , 상수 , 리터럴 
 *          ----------------
 *          변하는 수 , 변경할 수 없는 변수 , 실제 값
 *          
 *          1. 저장 
 *             = 선언과 동시에 값을 부여 (명시적 초기화)
 *               int a=10; *****
 *               int a;
 *               a=10; 
 *             = 입력값을 받아서 저장 
 *               ---- Scanner를 이용하는 방식 (키보드에서 입력된 값을 메모리에 저장)
 *                    ------------------------------------------------
 *               ---- IO (BufferedReader , System.in) => 예외처리 
 *             = 난수 (랜덤) Math.random() , Random
 *             ----------------------------------
 *             = 파일을 읽어서 초기화 
 *             = ***데이터베이스(오라클) 읽어서 초기화 (CURD)
 *               C (Create) : 추가 => 글쓰기
 *               U (Update) : 수정 => 글수정
 *               R (Read)   : 검색 => 목록/상세
 *               D (Delete) : 삭제 => 삭제 
 *             ---------------------------------- 
 *             
 *             명시적인 초기화 
 *             -----------
 *             1.int,short,byte => 그대로 값 대입 
 *             2.long           => L(l)  100L , 100l
 *             3.double  => 그대로 값 대입  => 10.5,20.11
 *             4.float   => 10.5F, 10.5f
 *             5.char    => 'A' , '\n' => 한글자만 저장이 가능 
 *             6.boolean => true/false
 *             ======================================
 *               왼쪽편이 항상 크거나 같다 
 *               int a=(byte,short,char,int)
 *               int a='A' 
 *               long l=(byte,short,char,int,long)
 *               float f=(byte,short,char,int,long,float)
 *               double d=(byte,short,char,int,long,float,double)
 *               -------------------------------------------------
 *               ***문자열 : String => Object 
 *               
 *            JDK 10이상 : 자동 지정변수 (JavaScript)  
 *            var a=10;
 *            var a1=10.5;
 *            var a2=true;
 *            var a3='A'
 *            ========================= 이전(SM) , 차세대(솔루션/SI)
 *                                     var은 없다    var이 존재할 수 있다 
 *                                     1.8         11이상 
 *                                     => jdk 18 => 이클립스 (22-03)
 *                                                  ------- 17
 *                                     => 스프링 (STS)
 *                                        4.xx => 프레임워크(부트)
 *                                        3.9.12  
 *          
 *          
 *    3장 : 데이터 제어 (연산자, 제어문)
 */
public class MainClass1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
        /*var a1=10; // int a1=10;
        var a2=true; // boolean a2=true;
        var a3='A'; // char a3='A'
        var a4=10.5f; // float a4=10.5f;
        var a5=10.5;  // double a5=10.5
        var a6="Hello"; // String a6="Hello";*/
		// 1. 정수 
		byte b=127;
		short s=32767;
		int i=1000;
		long l=10L;
		float f=10.5F; //10.5는 double
		double d=10.5;
		boolean boo=true;
		char c='A';
		
		// 2. 저장된 값을 읽기 시작 
		System.out.println("b="+b);// b=127 => 문자열 (문자열 결합)
		System.out.println("s="+s);
		System.out.println("i="+i);
		System.out.println("l="+l);
		System.out.println("f="+f);
		System.out.println("d="+d);
		System.out.println("boo="+boo);
		System.out.println("c="+c);
		// 출력 => System.out.println() ,System.out.print(),System.out.printf()
		/*
		 *    long  < float
		 *     8byte   4byte => byte에 따라서 결정 
		 *     표현할 수 있는 수가 몇개냐?
		 *     
		 *     1 ,  1.000000
		 *            -------  1 표현 => 2^6
		 *            
		 *    int long 
		 *     1   1
		 */
	}

}
