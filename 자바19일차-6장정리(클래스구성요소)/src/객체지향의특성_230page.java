/*
 *    객체지향프로그램 
 *    -------------
 *      기존의 프로그램(절차적 언어)  => 1970 (VI)
 *       => 새로운 규칙을 추가해서 보다 발전 (구조적)
 *       => 프로그램을 나눠서 작업 <==> 서로 관계가 유기적으로 구성 
 *          ----------------
 *            => 동작 (메소드)
 *            => 기능 (클래스)
 *            => 관련 클래스 => 패키지 
 *       => 코드의 재사용성 ==> 상속(is-a) , 포함 (has-a) => 7장
 *       class A
 *       {
 *       }
 *       class B extends A
 *       {
 *       }
 *       class A
 *       {
 *       }
 *       class B
 *       {
 *           A a=new A(); 
 *       }
 *       => 관리가 용이하다 ==> 수정 ,추가 (다형성)
 *          수정 : 오버라이딩 (modify)
 *          추가 : 오버로딩 (new)
 *       => 신뢰성이 높다 (이미 사용중...) => 데이터 보호 
 *          은닉화 ==> 상호 연결이 안됨 private int a;
 *          캡슐화 ==> 상호 연결이 가능 public void setA(int a){}
 *                                public int getA(){}
 *       ======================================== 객체지향의 3대 요소
 *       
 *       구조적인 프로그램 : 관련된 기능과 데이터를 나눠서 저장 
 *       클래스 구성요소 
 *       -----------
 *        1. 변수 : 프로그램에 필요한 데이터를 저장하는 장소
 *           ------------------------------------------------ 
 *            = 각각 저장 (여러개 저장) => Heap
 *            = 한개만 저장 => 공유 (static) => Method Area
 *           ------------------------------ 전역변수(클래스 전체 사용)
 *            = 한번 사용후에 버리는 변수 => 지역변수 , 매개변수 => Stack
 *              메소드안에서만 사용 
 *        2. 메소드 : 저장된 변수를 활용해서 ==> 기능을 만든다 
 *            = 리턴형
 *            = 매개변수
 *            = 메소드명 
 *        3. 생성자 : 객체생성시에 호출되는 메소드 (없는 경우 자동으로 한개 생성)
 *            = 변수에 대한 초기화 
 *              => 일반 변수값 => 디폴트 생성자 (매개변수가 없는 생성자)
 *              => 사용자 입력값 => 매개변수가 있는 생성자 
 *              => 생성자 => 필요시에 따라 여러개 제작이 가능 
 *                 --------------------------------
 *                  생성자는 무조건 클래스명과 동일해야 한다 
 *                              ------
 *                  리턴형이 없다 
 *                  여러개 제작 => 오버로딩 
 *                  오버로딩
 *                  ------ 생성자 ,일반메소드 적용 (println())
 *                    1) 메소드명이 동일 
 *                    2) 매개변수가 다르다(갯수,데이터형)
 *                    3) 리턴형은 관계없다 
 *          *** 변수의 초기화 
 *          - 인스턴스변수 초기화 : 초기화 블록 
 *             => 
 *             class A
 *             { ----------------- 선언만 가능 
 *                 int a;
 *                 
 *                 {
 *                    구현이 가능 (연산처리 ,메소드호출 , 제어문)
 *                    => 인스턴스 ,static => 가능 
 *                 }
 *             }
 *          - 정적변수 초기화 : 
 *             class B
 *             {
 *                 static int a;
 *                 int b;
 *                 
 *                 static 
 *                 {
 *                    //static변수만 사용이 가능 
 *                    //인스턴스는 사용이 불가능 
 *                 }
 *             }
 *             
 *             인스턴스변수의 초기화 => 생성자 
 *             static변수의 초기화 => static{}
 *       
 *       
 */
class Car
{
	String 이름;
	String 가격;
	String 연식,연료,연비;
	static String 제품사;
}
/*
 *   멤버변수 (공유,인스턴스) 
 *   -------------------
 *   클래스 영역에 선언시 
 *     기본 디폴트값이 지정 
 *     ---------------
 *     정수형 
 *       int  ===> 0
 *       long ===> 0L
 *     실수형
 *       double ==> 0.0
 *     논리형
 *       boolean ==> false
 *     문자열
 *       String  ==> null (모든 클래스:null)
 *                   ----- 저장 (메모리 주소) => 주소가 없는 상태 
 *       = NumberFormatException 500
 *         ?page = 1 
 *         c:  \\
 *       = NullPointerException
 *       
 *     class A
 *     {
 *         int a; ==> 저장시에 0으로 저장 a=0
 *         
 *         public void display()
 *         {
 *            int b; => 값이 없다 (지역변수는 무조건 초기화)
 *         }
 *     }
 *     
 *     if(s!=null)
 *     {
 *     }

 */
public class 객체지향의특성_230page {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//String s=null;
		//String ss=s.substring(0,10);
        //1. 저장 방법 
		Car car1=new Car();// 메모리 공간 (new연산자)
		System.out.println(car1);
		// 저장핳 공간이 없다 => NullPointerException
		car1.이름="기아 K8 (1세대)";
		car1.가격="3,259 ~ 4,565만원";
		car1.연료="가솔린,LPG";
		car1.연비="8.0 ~ 12.0km/l";
		car1.연식="2023형";
		car1.제품사="기아";
		/*
		 *      car1
		 *     --------
		 *      0x100   ==> 접근 :  car1(0x100).이름
		 *     --------
		 *             ↖
		 *             
		 *             0x100 ==> 변수(읽기/쓰기) => 변수(변경할 수 있다)
		 *                  car1.이름="" => 쓰기
		 *                  System.out.println(car1.이름) => 읽기
		 *            ----------
		 *             이름:
		 *            ----------
		 *             가격:
		 *            ----------
		 *             연식:
		 *            ----------
		 *             연비:
		 *            ----------
		 *             연료:
		 *            ----------
		 */
		Car car2=new Car();
		car2.이름="기아 K8 (1세대)";
		car2.가격="3,259 ~ 4,565만원";
		car2.연료="가솔린,LPG";
		car2.연비="8.0 ~ 12.0km/l";
		car2.연식="2023형";
		car2.제품사="기아";
		Car car3=new Car();
		car3.이름="기아 K8 (1세대)";
		car3.가격="3,259 ~ 4,565만원";
		car3.연료="가솔린,LPG";
		car3.연비="8.0 ~ 12.0km/l";
		car3.연식="2023형";
		car3.제품사="기아";
		Car car4=new Car();
		car4.이름="기아 K8 (1세대)";
		car4.가격="3,259 ~ 4,565만원";
		car4.연료="가솔린,LPG";
		car4.연비="8.0 ~ 12.0km/l";
		car4.연식="2023형";
		car4.제품사="기아";
		Car car5=new Car();
		car5.이름="기아 K8 (1세대)";
		car5.가격="3,259 ~ 4,565만원";
		car5.연료="가솔린,LPG";
		car5.연비="8.0 ~ 12.0km/l";
		car5.연식="2023형";
		car5.제품사="기아";
	}

}





