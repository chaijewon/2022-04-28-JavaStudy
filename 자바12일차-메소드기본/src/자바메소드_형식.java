/*
 *   메소드(249page)
 *   --------------
 *     1. 명령문의 집합 => 메소드  
 *     2. ---- 한가지 일만 수행이 가능하게 만든다
 *             프로그램 
 *              = 입력
 *              = 처리 => 세부적으로 나눠서 처리 (재사용)
 *                                       --------
 *              = 출력
 *     3. 높은 재사용율 => 필요시마다 사용이 가능 (수정해서 사용)
 *     4. 중복된 코드의 제거 
 *        예)
 *            오라클 연결
 *            오라클 연결 종료
 *            게시판 목록 출력 
 *               
 *              처리
 *              
 *            게시판 데이터 추가
 *               
 *              처리
 *              
 *            게시판 데이터 수정
 *               
 *              처리
 *              
 *            게시판 상세보기 
 *               
 *              처리
 *              
 *            게시판 데이터 삭제
 *               
 *              처리
 *              
 *            게시판 찾기 
 *              
 *              처리
 *              
 *     예) 
 *         -------------------
 *         정수 여러개 저장 
 *         최대값 구한다
 *         최소값 구한다
 *         최대값 , 최소값을 출력 
 *         -------------------
 *         ---------------------------
 *         정수 한개를 받아서 구구단을 출력한다 
 *         ---------------------------
 *         --------------
 *         난수 여러개 발생 
 *         정렬해서 출력한다 
 *         --------------
 *     page 251   프로그램 구조화 
 *                -----------  수정 (기능별 분리) => 단락 
 *                Chapter => 1) 찾기 2) 추가 3) 수정
 *     page 252   메소드 선언 / 구현 
 *     => 원형 => 라이브러리(구현이 완료)는 원형 
 *               -------
 *               1. 기능 (영어 => 뜻)
 *                  0.0 and less than 1.0.Returned 
 *               2. 리턴형(결과값)
 *               3. 매개변수
 *               double java.lang.Math.random()
 *               ------                     ----
 *     => 메소드 
 *         = 라이브러리 (이미 만들어진 메소드)
 *         = 사용자 정의 메소드 
 *           = 데이터형 (기본형)
 *           = 사용자 정의 데이터형 (참조형)
 *             --------------- 배열 / 클래스(영화 데이터형 ,음악 데이터형..)
 *         = 사용자 정의 메소드 (기능 / 리턴형(결과값) / 매개변수(사용자 요청값))
 *           리턴형 사용 
 *             = 기본형은 사용이 가능 
 *             = 배열 
 *             = 클래스 
 *             = 반드시 한개만 설정이 가능 (여러개의 데이터 전송: 배열/클래스)
 *                    --------
 *           매개변수 사용 
 *             = 여러개 설정이 가능 (기본 3개이상이면 묶어서 설정)
 *                              => 배열/클래스
 *             = 기본형은 사용이 가능 
 *             = 배열
 *             = 클래스 
 *           
 *           리턴형 
 *           매개변수 => 사용자 보낸값(없는 경우가 있다)
 *                 => ()
 *           리턴형 => 처리한 결과 (없는 경우도 있다 => void를 사용한다)
 *           -------------------- 자체 처리 (출력)
 *           
 *           사용 요청 ==> 요청 처리 => 결과값을 보여준다 
 *           -----------------------------------
 *           예매 요청 ==> 예매 처리 => 마이페이지 / 이메일 / 핸드폰
 *           물품 구매 ==> 구매 처리 => 핸드폰/이메일
 *           -------    -------    ----------
 *            매개변수 ==>  구현    => 리턴형  
 *            
 *           형식)
 *                리턴형 메소드명(매개변수...) => 선언 
 *                -----
 *                {
 *                    구현
 *                    return 결과값
 *                           ----- 데이터형이 동일 
 *                }
 *                *** 구현부가 있어야 메모리에 저장
 *                -------------------------
 *                  Method Area (method)
 *                -------------------------
 *                  Stack (지역변수,매개변수) ==> 메모리 자체 관리
 *                     {} => 자동으로 사라지는 변수 
 *                -------------------------
 *                  Heap (클래스 , 배열) ==> 프로그래머가 관리 영역 
 *                       => 자동 (GC)
 *                -------------------------
 *                클래스 => DTO
 *                {
 *                   1. 예매일 
 *                   2. 인원
 *                   3. 영화명
 *                   4. 결재
 *                   5. 좌석
 *                }
 *                클래스 reserve(예매 내용)
 *                {
 *                   예매처리 
 *                   return 결과값 
 *                }
 *                
 *        => 메소드 선언부는 3개 구성 
 *           리턴형(반환형) , 매개변수 , 메소드명 
 *           
 *        => 메소드명 : 식별자 (변수) => 권장(소문자시작)
 *        int max(int x,int y)
 *        ---    -------------
 *        리턴형    매개변수 => 반드시 (여러개 일때 ,로 구분)
 *        int info(String id,int age)
 *        
 *        int(long,float,double) max(int x,int y)
 *        ---- 일치 (큰 데이터형이면 가능)
 *        {
 *            int max=0;
 *            if(x>y)
 *              max=x;
 *            else
 *              max=y;
 *              
 *            return max;// 반환형
 *                   ----
 *        }
 *        
 *        매개변수는 여러개 사용이 가능 => 구분 , 
 *        검색=> 다른 데이터형 설정이 가능 
 *        
 *        ==> 만약에 결과값이 없이 출력만 할때 
 *            리턴형 => void(아무것도 없음)
 *        void를 사용시에는 return을 생략할 수 있다 
 *        예)
 *            void display()
 *            {
 *               -----
 *               -----
 *               -----
 *               
 *               return; // 생략을 할 수 있다 
 *                          --- 컴파일러가 자동으로 return을 추가한다
 *                          258page
 *            }
 *            
 *            메소드에서 return은 메소드 종료
 *        => 구현을 하기 위해서 변수가 필요할때가 존재 => 지역변수
 *           지역변수는 메소드에서 사용하는 변수 (메소드가 종료하면 자동 삭제)
 *           => 사라지기전에 다른 메소드로 전달 (매개변수)
 *         
 *        => 흐름 => 메소드의 내용을 처리 => 호출한 위치로 복귀
 *        
 *        => 메소드 호출 
 *           --------
 *           1) 자신의 클래스 : 메소드명(값...)
 *           2) 다른 클래스 : 클래스.메소드명(값...)
 *              random() => Math.random() ==> static
 *                          -----
 *                          Scanner scan  ==> instance
 *                          scan.nextInt()
 *                          
 *           예)
 *               int max(int a,int b)
 *                       a=10, b=20
 *               => int c=max(10,20)
 *                  =====     ------- 매개변수의 초기화 
 *                   리턴값 받기
 *   
 */
public class 자바메소드_형식 {
    // 첫번째 => 정수 두개를 전송 (매개변수에 값을 채운다) => 결과값은 최대값
	static int max(int a ,int b)
	{
		return a>b?a:b;
	}
	static int min(int a,int b)
	{
		return a<b?a:b;
	}
	static void process()
	{
		// 출력한다 
		int a=(int)(Math.random()*100)+1;
		int b=(int)(Math.random()*100)+1;
		System.out.println("a="+a+",b="+b);
		// 최대값과 최소값을 차를 출력
		int max=max(a,b);
		int min=min(a,b);
		System.out.println("최대값과 최소값을 차:"+(max-min));
		//System.out.println("최대값:"+max(a,b));
		//System.out.println("최소값:"+min(a,b));
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
        process();
	}

}








