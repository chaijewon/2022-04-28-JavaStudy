/*
 *    2022-05-09 : 조건문 정리
 *          - Back-End : 자바,JSP,Spring,Spring-Boot
 *                       데이터베이스 (오라클 / MySQL)
 *                       => 라이브러리 : MyBatis / JPA
 *                       => AI ...
 *          - Front-End : JavaScript 
 *                        Ajax(JavaScript AND XML)
 *                        VueJs
 *                        NodeJs
 *                        ReactJs
 *          - HTML/CSS : 퍼블리셔 (디자인너)
 *          - IT기획(아키텍쳐) 
 *          - 형식 
 *          - 응용 (어디서 사용) => 사용처 
 *          
 *    종류) 
 *         단일 조건문 (독립적 수행) => 조건에 맞는 모든 문장 수행시
 *           형식) 
 *                이유) 에러가 날 수 있는 부분 
 *                     1) 사용자 입력 
 *                        => 데이터 처리
 *                     2) 프로그래머 실수 
 *                if(조건식) // 유효성 검사 (사용자 입력값을 제어)
 *                {
 *                    조건이 true일때 실행하는 문장 
 *                    조건이 false일때는 건너뛴다 
 *                } 
 *         선택 조건문 (true/false) : 가장 많이 사용되는 조건문 
 *                아이디 중복 
 *                  = 중복 안된 경우 : 사용 가능 ID
 *                  = 중복 안된 경우 : 이미 사용중인 ID
 *                  = 웹 => 단점 (보여주기)
 *                
 *                형식)
 *                       10+20
 *                     if(조건문) => 조건문 (부정연산자(!), 비교연산자,논리연산자, equals())
 *                                 => 결과값이 true/false
 *                     {
 *                         조건이 true일때 처리
 *                     }
 *                     else
 *                     {
 *                         조건이 false일때 처리 
 *                     }
 *         다중 조건문 (조건에 맞는 문장만 수행) => 한개만 수행 
 *               ==> 응용 : 선택문 (switch~case)
 *                형식)
 *                     if(조건문)
 *                     {
 *                        1. 조건이 true => 처리하는 문장 
 *                           => 처리문장을 수행하면 종료
 *                        2. 조건이 false일때 다른 조건을 수행
 *                     }         ↓
 *                     else if(조건문)
 *                     {
 *                        1. 조건이 true => 처리하는 문장 
 *                           => 처리문장을 수행하면 종료
 *                        2. 조건이 false일때 다른 조건을 수행
 *                     }         ↓
 *                     else if(조건문)
 *                     {
 *                        1. 조건이 true => 처리하는 문장 
 *                           => 처리문장을 수행하면 종료
 *                        2. 조건이 false일때 다른 조건을 수행
 *                     }         ↓
 *                     else if(조건문)
 *                     {
 *                     
 *                        1. 조건이 true => 처리하는 문장 
 *                           => 처리문장을 수행하면 종료
 *                        2. 조건이 false일때 다른 조건을 수행
 *                     }         ↓
 *                     else // 생략이 가능 (필요시에만 사용)
 *                     {
 *                         조건이 없는 경우 처리하는 문장 
 *                     }
 *         중첩 조건문 (조건 => 조건)
 *                    형식) 
 *                         if(조건문) 로그인 완료 => >=90 A
 *                         {
 *                            if(조건문) // 사용자라면 >=98 A+
 *                            {
 *                               처리하는 문장 
 *                            }
 *                            else if // 관리자 // >=94 A0  A-
 *                            {
 *                               
 *                            }
 *                         }
 *                         
 *                         => if(조건 && 조건)
 *                            if(조건)
 *                            {
 *                               if(조건)
 *                               {
 *                               }
 *                            }
 */
public class 조건문정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
